package bank;

public abstract class Account {
    protected String accountNumber;
    protected String customerName;
    protected double balance;
    protected String accountType;

    public Account(String accountNumber, String customerName, double balance, String accountType) {
        this.accountNumber = accountNumber;
        this.customerName = customerName;
        this.balance = balance;
        this.accountType = accountType;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount);
        } else {
            System.out.println("Invalid withdrawal amount or insufficient balance.");
        }
    }

    public double checkBalance() {
        return balance;
    }

    public abstract void displayAccountDetails();
}
package bank;

public class SavingsAccount extends Account implements InterestBearing {
    private double interestRate;
    private double minimumBalance;

    public SavingsAccount(String accountNumber, String customerName, double balance, double interestRate, double minimumBalance) {
        super(accountNumber, customerName, balance, "Savings");
        this.interestRate = interestRate;
        this.minimumBalance = minimumBalance;
    }

    @Override
    public void deposit(double amount) {
        super.deposit(amount);
        calculateInterest();
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount >= minimumBalance) {
            super.withdraw(amount);
        } else {
            System.out.println("Cannot withdraw. Minimum balance requirement not met.");
        }
    }

    @Override
    public void calculateInterest() {
        balance += balance * interestRate / 100;
    }

    @Override
    public void displayAccountDetails() {
        System.out.println("Savings Account Details:");
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Customer Name: " + customerName);
        System.out.println("Balance: " + balance);
        System.out.println("Interest Rate: " + interestRate);
        System.out.println("Minimum Balance: " + minimumBalance);
    }
}

package bank;

public class CheckingAccount extends Account {
    private double minimumBalance;
    private double fee;

    public CheckingAccount(String accountNumber, String customerName, double balance, double minimumBalance, double fee) {
        super(accountNumber, customerName, balance, "Checking");
        this.minimumBalance = minimumBalance;
        this.fee = fee;
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount >= minimumBalance) {
            super.withdraw(amount);
        } else {
            balance -= fee;
            System.out.println("Fee charged: " + fee);
        }
    }

    @Override
    public void displayAccountDetails() {
        System.out.println("Checking Account Details:");
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Customer Name: " + customerName);
        System.out.println("Balance: " + balance);
        System.out.println("Minimum Balance: " + minimumBalance);
        System.out.println("Fee: " + fee);
    }
}
package bank;

public interface InterestBearing {
    void calculateInterest();
}
package bank;

import java.util.Scanner;

public class BankApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Account account = null;

        while (true) {
            System.out.println("\n--- Banking Application ---");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit Money");
            System.out.println("3. Withdraw Money");
            System.out.println("4. Check Balance");
            System.out.println("5. Display Account Details");
            System.out.println("6. Exit");

            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("Enter account type (Savings/Checking): ");
                    String type = scanner.next();
                    System.out.println("Enter account number: ");
                    String accountNumber = scanner.next();
                    System.out.println("Enter customer name: ");
                    String customerName = scanner.next();
                    System.out.println("Enter initial balance: ");
                    double balance = scanner.nextDouble();

                    if (type.equalsIgnoreCase("Savings")) {
                        System.out.println("Enter interest rate: ");
                        double interestRate = scanner.nextDouble();
                        System.out.println("Enter minimum balance: ");
                        double minimumBalance = scanner.nextDouble();
                        account = new SavingsAccount(accountNumber, customerName, balance, interestRate, minimumBalance);
                    } else if (type.equalsIgnoreCase("Checking")) {
                        System.out.println("Enter minimum balance: ");
                        double minimumBalance = scanner.nextDouble();
                        System.out.println("Enter fee: ");
                        double fee = scanner.nextDouble();
                        account = new CheckingAccount(accountNumber, customerName, balance, minimumBalance, fee);
                    }
                    System.out.println("Account created successfully.");
                    break;
                case 2:
                    if (account != null) {
                        System.out.println("Enter amount to deposit: ");
                        double depositAmount = scanner.nextDouble();
                        account.deposit(depositAmount);
                    } else {
                        System.out.println("No account found. Please create an account first.");
                    }
                    break;
                case 3:
                    if (account != null) {
                        System.out.println("Enter amount to withdraw: ");
                        double withdrawAmount = scanner.nextDouble();
                        account.withdraw(withdrawAmount);
                    } else {
                        System.out.println("No account found. Please create an account first.");
                    }
                    break;
                case 4:
                    if (account != null) {
                        System.out.println("Current balance: " + account.checkBalance());
                    } else {
                        System.out.println("No account found. Please create an account first.");
                    }
                    break;
                case 5:
                    if (account != null) {
                        account.displayAccountDetails();
                    } else {
                        System.out.println("No account found. Please create an account first.");
                    }
                    break;
                case 6:
                    System.out.println("Exiting application.");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
